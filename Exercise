You are given a 3-D Matrix in which each block contains 0 initially.
The first block is defined by the coordinate (1,1,1) and
the last block is defined by the coordinate (N,N,N). There are two types of queries.

          Se le da una Matriz 3-D en la que cada bloque contiene 0 inicialmente.
          El primer bloque está definido por la coordenada (1,1,1) y el último bloque
          está definido por la coordenada (N, N, N). Hay dos tipos de consultas.

UPDATE x y z W

          Atuaclice x y z en W

updates the value of block (x,y,z) to W.
QUERY x1 y1 z1 x2 y2 z2

          Actualiza el valor del bloque (x, y, z) a W.
          QUERY x1 y1 z1 x2 y2 z2 Cambiar todo el bloque

calculates the sum of the value of blocks whose x coordinate is between
x1 and x2 (inclusive), y coordinate between y1 and y2 (inclusive)
and z coordinate between z1 and z2 (inclusive).


        Calcula la suma del valor de los bloques cuya coordenada x está entre
        x1 y x2 (inclusive), la coordenada y entre y1 y y2 (inclusive)
         y la coordenada z entre z1 y z2 (inclusive)

 Input Format
 The first line contains an integer T, the number of test-cases. T testcases follow.
 For each test case, the first line will contain two integers N and M separated by a single space.
 N defines the N * N * N matrix.
 M defines the number of operations.
 The next M lines will contain either


         Formato de entrada
         La primera línea contiene un número entero T, el número de casos de prueba. Los casos de prueba T siguen.
         Para cada caso de prueba, la primera línea contendrá dos enteros N y M separados por un único espacio.
         N define la matriz N * N * N.
         M define el número de operaciones.
         Las siguientes líneas M contendrán

1. UPDATE x y z W
2. QUERY  x1 y1 z1 x2 y2 z2

          1. Actulice x y z W
          2. Consulta x1 y1 z1 x2 y2 z2

Output Format
Print the result for each QUERY.

Constrains
1 <= T <= 50
1 <= N <= 100
1 <= M <= 1000
1 <= x1 <= x2 <= N
1 <= y1 <= y2 <= N
1 <= z1 <= z2 <= N
1 <= x,y,z <= N
-109 <= W <= 109


        Formato de salida
        Imprima el resultado de cada CONSULTA.

        Restricciones
        1 <= T <= 50
        1 <= N <= 100
        1 <= M <= 1000
        1 <= x1 <= x2 <= N
        1 <= y1 <= y2 <= N
        1 <= z1 <= z2 <= N
        1 <= x, y, z <= N
        -109 <= W <= 109

Sample Input

2
4 5
UPDATE 2 2 2 4
QUERY 1 1 1 3 3 3
UPDATE 1 1 1 23
QUERY 2 2 2 4 4 4
QUERY 1 1 1 3 3 3
2 4
UPDATE 2 2 2 1
QUERY 1 1 1 1 1 1
QUERY 1 1 1 2 2 2
QUERY 2 2 2 2 2 2



        Ejemplo de entrada

        2
        4 5
        ACTUALIZAR 2 2 2 4
        CONSULTA 1 1 1 3 3 3
        ACTUALIZACIÓN 1 1 1 23
        CONSULTA 2 2 2 4 4 4
        CONSULTA 1 1 1 3 3 3
        2 4
        ACTUALIZACIÓN 2 2 2 1
        CONSULTA 1 1 1 1 1 1
        CONSULTA 1 1 1 2 2 2
        CONSULTA 2 2 2 2 2 2

Sample Output

4
4
27
0
1
1

          Ejemplo de salida

          4
          4
          27
          0
          1
          1


Explanation
First test case, we are given a cube of 4 * 4 * 4 and 5 queries. Initially all the cells (1,1,1) to (4,4,4) are 0.
UPDATE 2 2 2 4 makes the cell (2,2,2) = 4
QUERY 1 1 1 3 3 3. As (2,2,2) is updated to 4 and the rest are all 0. The answer to this query is 4.
UPDATE 1 1 1 23. updates the cell (1,1,1) to 23. QUERY 2 2 2 4 4 4. Only the cell (1,1,1) and (2,2,2) are
non-zero and (1,1,1) is not between (2,2,2) and (4,4,4). So, the answer is 4.
QUERY 1 1 1 3 3 3. 2 cells are non-zero and their sum is 23+4 = 27.



          Explicación
          Primer caso de prueba, se nos da un cubo de 4 * 4 * 4 y 5 consultas. Inicialmente todos los bloques (1,1,1) a (4,4,4) son 0.
          UPDATE 2 2 2 4 hace que el bloque (2,2,2) = 4
          QUERY 1 1 1 3 3 3. Como (2,2,2) se actualiza a 4 y el resto son todos 0. La respuesta a esta consulta es 4.
          ACTUALIZACIÓN 1 1 1 23. actualiza la celda (1,1,1) a 23. CONSULTA 2 2 2 4 4 4. Sólo la celda (1,1,1) y (2,2,2) no son
          cero y (1,1,1) no está entre (2,2,2) y (4,4,4). Por lo tanto, la respuesta es 4.
          QUERY 1 1 1 3 3 3. 2 las células no son cero y su suma es 23 + 4 = 27.


/* Código C */
    #include <stdio.h>
    #include <string.h>
    #include <math.h>
    #include <stdlib.h>

    int main() {

        /* Enter your code here. Read input from STDIN. Print output to STDOUT */
        return 0;
    }

    /* Código node */

          function processData(input) {
          //Enter your code here
      }

      process.stdin.resume();
      process.stdin.setEncoding("ascii");
      _input = "";
      process.stdin.on("data", function (input) {
          _input += input;
      });

      process.stdin.on("end", function () {
         processData(_input);
      });
